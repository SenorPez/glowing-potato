import {Component, OnInit} from '@angular/core';
import * as THREE from 'three';
import {Group, Mesh, Object3D, Scene, Vector3} from 'three';
import {OrbitdataService} from "../orbitdata.service";
import {ApiService, Planet} from "../api.service";
import {OrbitControls} from "three/examples/jsm/controls/OrbitControls";
import {MatSliderChange} from "@angular/material/slider";
import {Transfer} from "../transfer.js";
import {filter, map, toArray} from "rxjs/operators";
import {combineLatest, range} from "rxjs";

@Component({
  selector: 'app-orbit',
  templateUrl: './orbit.component.html',
  styleUrls: ['./orbit.component.css']
})
export class OrbitComponent implements OnInit {
  // TODO: Add AU to API
  private AU: number = 149597870700;
  // TODO: Add solar radius to API?
  private solarRadius: number = 800240666; // Solar radius in m. 1 Solar Radius = 1 axis unit.

  // TODO: Customizable ship performance.
  private maxDV = 71250; // 75% of 95 km / sec
  private maxFT = 147; // 75% of 28 week endurance

  // TODO: Customizable orbits
  private originOrbitHeight = 200000; // Default 200 km circular orbit.
  private targetOrbitHeight = 200000;

  // TODO: Figure out a better way to do colors.
  private planetColors: number[] = [
    0xFF0000,
    0xFFFF00,
    0x00FF00
  ]
  private pathColors: number[] = [
    0xFFB3B3,
    0xFFFFB3,
    0xB3FFB3
  ]

  // TODO: Selectable system
  private system_id: number = 1621827699;
  // TODO: Selectable star (or multiple stars within a system)
  private star_id: number = -1826843336;

  private frameScale: number = 7; // Default: 1 second = 7 days
  private planetScale: number = 1000; // Default: Planet locators are 1000x bigger than planet
  private zScale: number = 20; // Default: z Values are 20x larger
  private divisions: number = 60; // Default: Orbital paths are divided into 60 segments.

  elapsedTime: number = 0;
  private lastFrame !: number;

  private animating: boolean = false;
  working: boolean = true;

  scene: Scene = new THREE.Scene();
  private orbitsGroup: Group = new THREE.Group();
  private planetsGroup: Group = new THREE.Group();
  // private orbitsGroupName: string = "grp_orbits";
  private planetLocators: Mesh[] = [];

  private transfers: Transfer[] = [];

  constructor(private orbitDataService: OrbitdataService, private apiService: ApiService) {
  }

  private readonly results = [[[-43099846467.71351, -21184300229.783638, -12149029.904668095], [27725.332189331442, -44323.447959052166, 58.11913000926364]], [[-40504928807.07202, -24907902271.984413, -7078183.572788838], [32317.50015597125, -41790.332122958935, 59.174005723728506]], [[-37520355793.14009, -28391629026.72348, -1939473.367333945], [36736.81781093574, -38769.82052445413, 59.68332982880803]], [[-34163288522.57921, -31593180268.281998, 3218222.9960533828], [40930.90310740433, -35258.26156378965, 59.60681786754641]], [[-30455631218.50304, -34470148559.53961, 8342574.048602162], [44842.341459894036, -31257.0566774403, 58.9050058867113]], [[-26424462719.92039, -36980518887.08615, 13377922.54615213], [48408.81026770786, -26774.154241721895, 57.540635439005435]], [[-22102443485.725563, -39083305854.64257, 18265550.202306855], [51563.5375808735, -21825.73402416047, 55.48044074182433]], [[-17528164847.767372, -40739342887.85843, 22944115.292759616], [54236.198071459345, -16438.029614596562, 52.69736545616994]], [[-12746398110.71504, -41912231642.16962, 27350300.285186186], [56354.352783464805, -10649.194693274963, 49.173202806157896]], [[-7808192253.114267, -42569449517.14915, 31419703.98429381], [57845.52787901392, -4511.0677406213945, 44.9016002952068]], [[-2770762001.8782597, -42683598181.65017, 35088004.60884621], [58639.994543577464, 1909.3669699935672, 39.89129758117437]], [[2302894881.925625, -42233756165.37587, 38292405.06711586], [58674.250604711735, 8529.077880507939, 34.16937587181248]], [[7344708495.695505, -41206874706.13276, 40973348.307255045], [57895.110607562245, 15248.936589688128, 27.784198920760716]], [[12282620064.555275, -39599130388.52738, 43076459.0040739], [56264.18815022458, 21954.814106553815, 20.807637340901874]], [[17042057156.662622, -37417124555.45758, 44554629.94699545], [53762.41575291998, 28520.063741530146, 13.33611585076256]], [[21547784037.262287, -34678803401.1454, 45370131.7679377], [50394.11948975905, 34809.50984880183, 5.490037909406109]], [[25726064660.472084, -31413970133.862614, 45496590.08412135], [46190.084634437626, 40684.87106951488, -2.588749762793931]], [[29507026566.92327, -27664276853.17803, 44920653.36031954], [41209.053729028514, 46011.30814477559, -10.74157952730223]], [[32827069971.340607, -23482621202.106663, 43643176.10897576], [35537.21765561495, 50664.544343814785, -18.799504260449552]], [[35631137737.69015, -18931929160.929844, 41679770.66836754], [29285.49492230132, 54537.82200327557, -26.591263659759854]], [[37874657504.62846, -14083372915.21895, 39060636.306684166], [22584.71001867413, 57547.89120885626, -33.95189899902851]], [[39524991237.993904, -9014139653.687368, 35829649.50686074], [15579.111542711986, 59639.3117889375, -40.73108010205218]], [[40562277703.12921, -3804920182.991165, 32042780.90064551], [8418.934346495596, 60786.581262906904, -46.800222501390095]], [[40979620961.965225, 1462685355.4201546, 27765976.876867756], [1252.8405998440576, 60993.9285905567, -52.057664203522755]], [[40782649961.35168, 6708648584.603771, 23072693.8319095], [-5778.956113859102, 60292.95741205178, -56.431491764644875]], [[39988537114.02217, 11856713414.653593, 18041292.64816875], [-12550.253304157824, 58738.60300560405, -59.87997200779347]], [[38624607333.55643, 16836196696.25139, 12752490.096750418], [-18952.73951201497, 56404.03004885184, -62.389872147411566]], [[36726688720.10126, 21583326111.01268, 7287028.88804392], [-24898.1013297754, 53375.128300244265, -63.97317470967307]], [[34337353223.206818, 26042106319.499283, 1723679.2594320737], [-30318.503362371943, 49745.181694980085, -64.66279014986581]], [[31504175551.065094, 30164747931.095463, -3862367.0193126276], [-35165.74509488695, 45610.13584052095, -64.50785144315721]], [[28278108623.62954, 33911723121.50522, -9400695.978868134], [-39409.47077575358, 41064.716073032265, -63.569076023643355]], [[24712040953.556656, 37251526474.14038, -14826486.001959695], [-43034.807776774, 36199.49009874601, -61.914542717351885]], [[20859570787.764843, 40160222176.49589, -20080983.338604044], [-46039.75912990025, 31098.84733560624, -59.61609023517594]], [[16774006809.993017, 42620852577.39771, -25111696.74938091], [-48432.601786496976, 25839.788146729792, -56.746422741297245]], [[12507586893.856018, 44622771915.73148, -29872372.69710235], [-50229.46344657002, 20491.376503980322, -53.37691783119465]], [[8110894594.315306, 46160955788.30547, -34322809.37367307], [-51452.18036991012, 15114.70015190458, -49.57607412835265]], [[3632446748.3164177, 47235323792.67681, -38428560.92590468], [-52126.482634524524, 9763.192709004092, -45.408505067227686]], [[-881576616.1887131, 47850101065.8475, -42160574.61360681], [-52280.51321987806, 4483.193234535847, -40.934375334318155]], [[-5387488207.544399, 48013234756.40445, -45494794.76287647], [-51943.661517923654, -685.3562021107464, -36.20917988568142]], [[-9844161012.844402, 47735873947.65466, -48411759.17348407], [-51145.677546866966, -5708.149897809406, -31.28377658700157]], [[-14213030012.003325, 47031916032.85066, -50896206.567566946], [-49916.02714131285, -10555.748189773392, -26.20459801679837]], [[-18458047136.601273, 45917618727.16847, -52936707.88595303], [-48283.44793351957, -15202.83310054152, -21.013982994057386]], [[-22545605181.368607, 44411274436.9801, -54525329.715036236], [-46275.668815026664, -19627.51196809108, -15.750582284892719]], [[-26444443343.430748, 42532942262.19118, -55657334.724184096], [-43919.260170535534, -23810.68104989992, -10.449804906457665]], [[-30125544463.487244, 40304232192.93439, -56330921.53058712], [-41239.58742657705, -27735.454104580225, -5.144281230064777]], [[-33562031898.47283, 37748135842.387215, -56547004.69835389], [-38260.845685899505, -31386.656380482826, 0.13567323937720488]], [[-36729072247.047844, 34888898149.96857, -56309034.448611796], [-35006.158049019694, -34750.38170431211, 5.361603732621603]], [[-39603788834.281845, 31751924756.242912, -55622854.95748799], [-31497.724478636974, -37813.60898705855, 10.506477850547848]], [[-42165189887.26687, 28363720091.78961, -54496599.72422491], [-27757.011684471, -40563.87407703234, 15.544266177726294]], [[-44394114644.649216, 24751851564.23519, -52940622.30049916], [-23804.977507419324, -42988.99321558031, 20.449543245222845]], [[-46273200188.313705, 20944935517.780014, -50967460.60164958], [-19662.32570513804, -45076.83519859938, 25.197109231540345]], [[-47786871516.8291, 16972640838.609781, -48591833.00298047], [-15349.788933975873, -46815.14059172976, 29.761632529965567]], [[-48921357253.64215, 12865706156.705303, -45830664.401536025], [-10888.439120769845, -48191.38791607422, 34.117313681571666]], [[-49664733356.43026, 8655966523.534966, -42703140.343254946], [-6300.0253350528255, -49192.70857839324, 38.237572135411426]], [[-50006997225.30034, 4376385201.681309, -39230787.126264684], [-1607.3396878545027, -49805.85445230479, 42.094758854116336]], [[-49940174651.04146, 61085762.9899292, -35437575.440438055], [3165.388362671125, -50017.22442184775, 45.659899974022]], [[-49458462047.59892, -4254620966.899475, -31350044.53362721], [7992.069733793542, -49812.95886626552, 48.90247962206904]], [[-48558406310.94022, -8534221479.181541, -26997443.04200234], [12844.307549889054, -49179.113959277776, 51.790273670427105]], [[-47239124358.71053, -12740003185.59719, -22411881.414234303], [17690.92786001042, -48101.93068941642, 54.28925075290347]], [[-45502563829.31036, -16833085991.710093, -17628489.2199405], [22497.498038850834, -46568.21650504192, 56.36356231761993]], [[-43353805427.25847, -20773492441.68242, -12685568.48442026], [27225.847333140457, -44565.86014052482, 57.97564980678479]], [[-40801405837.52048, -24520268899.200104, -7624731.466505537], [31833.611654641238, -42084.5019913646, 59.08650403928008]], [[-37857777811.50135, -28031672186.05493, -2491007.9539185315], [36273.834614784464, -39116.382624059304, 59.656119071250046]], [[-34539600749.92482, -31265437969.54225, 2667096.7946275026], [40494.66906505268, -35657.389562508295, 59.64418938145599]], [[-30868250673.595547, -34179148683.28696, 7797616.769552415], [44439.23784008361, -31708.315960813114, 59.01110378442957]], [[-26870232724.023186, -36730719456.18745, 12845240.574144244], [48045.72820648755, -27276.33239097809, 57.71928992607561]], [[-22577592218.70731, -38879019821.480675, 17751559.846126914], [51247.81000943693, -22376.652787675845, 55.734956668372575]], [[-18028271944.860344, -40584646127.17344, 22455486.586639643], [53975.47973643656, -17034.34579396675, 53.03026446718676]], [[-13266374274.564133, -41810853686.72724, 26893876.588324107], [56156.437191590645, -11286.202314200458, 49.585921915526455]], [[-8342277745.817654, -42524647890.21954, 31002393.964494027], [57718.092112965496, -5182.519731697794, 45.394156287356985]], [[-3312550478.7086124, -42698019020.58656, 34716644.37068237], [58590.26769151943, 1211.3932498320282, 40.461935352601664]], [[1760400692.5543022, -42309286170.85098, 37973590.18609207], [58708.60965300659, 7814.2417123904415, 34.814229093659655]], [[6809003569.743946, -41344492142.90151, 40713238.44032182], [58018.61920288707, 14528.58942355937, 28.497001836844884]], [[11761562553.448606, -39798765590.21116, 42880561.4828382], [56480.10787503843, 21241.819533780505, 21.57953475894246]], [[16543691998.079765, -37677542653.018684, 44427573.002402574], [54071.73444081145, 27828.460682245764, 14.15562130336805]], [[21080128558.240833, -34997523173.28081, 45315442.180412486], [50795.15326192607, 34154.01417787152, 6.343184291560188]], [[25296865212.91781, -31787232325.968094, 45516493.249889076], [46678.21553756209, 40080.234156929095, -1.718039272976558]], [[29123500425.940598, -28087072570.08252, 45015915.06247727], [41776.65917789593, 45471.57744058104, -9.870899617170242]], [[32495650875.031364, -23948785989.802288, 43813003.88955555], [36173.82936146344, 50202.2954237328, -17.947188258521695]], [[35357245478.822075, -19434301653.658337, 41921788.2875851], [29978.195100894256, 54163.446571316985, -25.775484762622725]], [[37662511125.683685, -14614009492.93953, 39370937.716290526], [23318.736845860418, 57269.02580121581, -33.18974537303022]], [[39377481462.06002, -9564569832.711245, 36202930.15252409], [16338.61230082707, 59460.475321642734, -40.03770662565902]], [[40480907827.75884, -4366422815.824783, 32472535.596288204], [9187.781936651725, 60709.05901630712, -46.18817152811755]], [[40964517754.13278, 898806647.8849106, 28244746.61113955], [2015.4227202314214, 61015.90291786595, -51.536419859136274]], [[40832638607.85935, 6150810788.934027, 23592339.89816249], [-5037.055002043024, 60409.85042534864, -56.00729421402262]], [[40101268343.69851, 11312836172.94189, 18593275.90710649], [-11841.733147840303, 58943.57145165807, -59.55587941803127]], [[38796721276.46592, 16313531144.07301, 13328135.653038464], [-18288.254889338335, 56688.541581740974, -62.166027257482824]], [[36953999101.692696, 21088334535.527855, 7877761.060944069], [-24286.11795960484, 53729.55109564132, -63.84721497238155]], [[34615036738.89314, 25580391288.53043, 2321217.2810415775], [-29765.316210512123, 50159.33221823011, -64.63033604702578]], [[31826954018.200745, 29741025532.727776, -3265856.7131450996], [-34675.62065064168, 46073.74752392662, -64.56301412607166]], [[28640414966.95595, 33529832538.492172, -8812490.452412909], [-38984.872189530644, 41567.80997580535, -63.70493858058941]], [[25108163564.29729, 36914467177.32874, -14253235.821079912], [-42676.6644189839, 36732.64405538285, -62.123584798866446]], [[21283773839.106297, 39870210228.76717, -19528676.19681158], [-45747.74902901588, 31653.371100313547, -59.89054020525952]], [[17220626475.796516, 42379388497.44904, -24585648.201825306], [-48205.423847396705, 26407.81848153205, -57.07853309522872]], [[12971105052.862331, 44430713892.940636, -29377237.491931632], [-50065.08454080607, 21065.90877585884, -53.75916769624245]], [[8585992580.481783, 46018593481.8924, -33862607.42867824], [-51348.049294808974, 15689.572891591572, -50.00130745846446]], [[4114042161.3978424, 47142449302.06587, -38006712.85211904], [-52079.708158967594, 10333.039819688902, -45.87001531047433]], [[-398306950.42850876, 47806074821.42084, -41779942.643110305], [-52288.00699648618, 5043.375996110732, -41.425947668482515]], [[-4907096207.529247, 48017045011.69983, -45157725.86699713], [-52002.24879644858, -138.82789874579976, -36.72510129098244]], [[-9370923628.629238, 47786189258.39591, -48120127.98636057], [-51252.17970509528, -5178.700163861762, -31.818822610707148]]]
  private readonly trans = [[-500524.9087206562, -1891031.294198788, -82.05218127027157], [-234258.01768505084, -964104.8242205105, -11.310980932276722], [-144934.3659083663, -653194.7451135193, 12.690159462371012], [-100171.15349326309, -496071.26248136995, 25.367144814233885], [-73553.17920374619, -400308.3938877244, 34.24587038667071], [-56298.55681757004, -335146.87700069137, 42.627539764580014], [-44609.219342672426, -287478.87479906244, 53.522061861639976], [-36500.193638313605, -250827.22148281572, 72.523942614216], [-30772.06970812261, -221642.1763603087, 119.13923102997947], [-26637.707752893526, -197804.1512162918, 411.45390104415196], [-23583.666229254053, -177949.68043924277, -247.2577141509375], [-21259.46881236864, -161148.98242534665, -91.31079016904985], [-19437.845472043722, -146740.83470956518, -54.80357450982441], [-17969.997471724353, -134240.67487117858, -38.55783148831209], [-16755.284306024638, -123285.35140948909, -29.346834482768777], [-15724.550542931367, -113597.58973518899, -23.372615028061144], [-14829.087329757931, -104962.23984122013, -19.138792255912534], [-14033.658996217451, -97209.92970791824, -15.938223106949016], [-13312.059370137407, -90205.57594730685, -13.394021235564328], [-12644.23175378001, -83840.17465209618, -11.28716380904091], [-12014.36396553786, -78024.85857005612, -9.481687995762105], [-11409.600874904776, -72686.55076202207, -7.888639760654852], [-10819.155903230387, -67764.76249336882, -6.447255231102796], [-10233.687072428911, -63209.22421428813, -5.1145084673150905], [-9644.855055611362, -58978.13173149663, -3.8590217273514362], [-9045.013754119365, -55036.85194949827, -2.6573942579430887], [-8427.006044073314, -51356.97382296464, -1.491949646328303], [-7784.0529693526805, -47915.61611894282, -0.3493627076097534], [-7109.736052413575, -44694.91736048587, 0.7801372829566421], [-6398.080058548828, -41681.63673400477, 1.9031675502109882], [-5643.74636991051, -38866.78964264411, 3.023317414797912], [-4842.34248355225, -36245.231516907035, 4.141097636616426], [-3990.8376140126543, -33815.09556764341, 5.253816934854421], [-3088.0457375617557, -31576.99622645814, 6.355507214923276], [-2135.098359608413, -29532.944837540857, 7.43703429830844], [-1135.7915480171005, -27684.9981162224, 8.48652086406681], [-953.4507621407438, -11260.132532112939, -17.168030793796536], [-2722.6928869567028, -10201.309887203166, -18.191491803699797], [-4415.025229854796, -9305.497898021067, -19.04204056339675], [-6026.933379118173, -8556.309345910333, -19.727524787319624], [-7556.022651445623, -7938.379408345331, -20.255760110924623], [-9000.861860570045, -7437.343735132416, -20.634397704656827], [-10360.842695143652, -7039.805932778222, -20.870808948336073], [-11636.054537318008, -6733.297561504508, -20.971983099445776], [-12827.173999289778, -6506.233242963178, -20.9444335049146], [-13935.368113811546, -6347.862983304093, -20.794107541245946], [-14962.209930419704, -6248.223364890558, -20.526294988938332], [-15909.605196815888, -6198.088864124637, -20.145528815433416], [-16779.728809389842, -6188.9242162628825, -19.655471189316284], [-17574.969771880384, -6212.83846882648, -19.05877574966455], [-18297.88348727663, -6262.541138356997, -18.35691437150937], [-18951.150311430905, -6331.300704795706, -17.54995237600678], [-19537.53940782457, -6412.9055375310145, -16.636249483109847], [-20059.8770548987, -6501.627241538934, -15.612053383092867], [-20521.01866588356, -6592.186336187888, -14.470936197106866], [-20923.823883153815, -6679.720129214756, -13.202997058808812], [-21271.134202763427, -6759.752620920924, -11.793708867368217], [-21565.752668498273, -6828.166266261957, -10.222209432202943], [-21810.425247335184, -6881.175433141483, -8.458698360210697], [-22007.82355850283, -6915.3014220047435, -6.460342964655069], [-22160.528675169575, -6927.348952821516, -4.164593626930608], [-22271.015749459784, -6914.3840784190315, -1.477773161213995], [-22341.639225071835, -6873.71354479482, 1.7454757278312083], [-22374.618390271673, -6802.865685320667, 5.741743218014348], [-22372.022966071472, -6699.5730010490815, 10.921626493843549], [-22335.758237390437, -6561.756636778898, 18.063092374478924], [-22267.548514801118, -6387.513006585361, 28.837174950065293], [-22168.913751113323, -6175.102872712675, 47.59990882915201], [-22041.09630015306, -5922.94363231321, 90.39524182434994], [-21883.493728648773, -5629.627718703003, 303.961818883922], [-21700.4503282955, -5293.852594500312, -318.07902885151094], [-21493.095267575845, -4914.386234765368, -114.50276613052642], [-21257.567560621188, -4490.370229802667, -72.4448911026756], [-20995.516085707623, -4020.9311915756143, -53.804698994089094], [-20706.57906610983, -3505.394442145148, -42.98681194637951], [-20389.887017916586, -2943.2567902996643, -35.71720545357666], [-20044.070059852635, -2334.1959536119384, -30.346287764987952], [-19667.200349496008, -1678.0861749217347, -26.10106742981657], [-19256.716856853447, -975.0226107389371, -22.569762090657353], [-18809.338373697345, -225.36040656557435, -19.51161371226806], [-18320.96726021473, 570.2227946140138, -16.77531126531544], [-17786.58769009734, 1410.6292034691696, -14.259990736725223], [-17200.165426535776, 2294.193528075782, -11.895024722184594], [-16554.561649070136, 3218.469092119245, -9.628918843920168], [-15841.4817982567, 4179.929885404315, -7.422993672960753], [-15051.492596922326, 5173.573453239602, -5.247786206401454], [-14174.156627942362, 6192.417938460328, -3.081133032300151], [-13198.35286127833, 7226.905191145455, -0.9073919151494149], [-12112.868815206188, 8264.256046751956, 1.2825062657187298], [-10907.355426748096, 9287.878319072528, 3.4903975048203812], [-9573.711411538441, 10277.00191463325, 5.709859566845674], [-8107.8861907583705, 11206.79384833954, 7.925168665138932], [-6511.940351299495, 12049.250101075146, 10.110733186003564], [-4795.9897895989625, 12775.107443076196, 12.231609777495258], [-2979.453113051365, 13356.802271024255, 14.245648409035722], [-1090.9571544501396, 13772.120718239976, 16.107463011301384], [-25.36950038337676, 16513.220496272388, -10.887066729677022], [-1187.853089975453, 16721.369439900787, -11.694045404810462], [-2328.5979081476994, 16878.417363325527, -12.40970076510514], [-3444.9335874003186, 16987.301554654252, -13.035427694331762], [-4534.5630640127665, 17051.03180499268, -13.572562816482158], [-5595.530034609683, 17072.65370291657, -14.022343805128777], [-6626.186870763897, 17055.219206415593, -14.385864490424662], [-7625.163677336674, 17001.763547666706, -14.664025396691882], [-8591.338937343156, 16915.2875769454, -14.857478584427042], [-9523.812000178168, 16798.744730160644, -14.966564902570017], [-10421.877531337133, 16655.03189563416, -14.991240885201657], [-11285.001941064967, 16486.98355023281, -14.930991438342136], [-12112.801738422375, 16297.368626679243, -14.784723007752625], [-12905.023709087516, 16088.889659166955, -14.550629884436455], [-13661.526784072475, 15864.1838313421, -14.226023370149088], [-14382.265447833672, 15625.825618428526, -13.807109189196078], [-15067.274524384995, 15376.330773561891, -13.288691986820075], [-15716.655176196246, 15118.161457382017, -12.663775659378643], [-16330.561950736164, 14853.73234983519, -11.923012337198552], [-16909.190711869778, 14585.417614108988, -11.053927091717018], [-17452.767296679336, 14315.5586046375, -10.039802637983056], [-17961.536741636013, 14046.472223878669, -8.858034916999932], [-18435.75292451823, 13780.459835486006, -7.477640098868264], [-18875.668469157637, 13519.816633668821, -5.855352505707436], [-19281.524757898238, 13266.84134879715, -3.929285879960389], [-19653.541889908982, 13023.84613637736, -1.6081744325946765], [-19991.90840909859, 12793.166449246177, 1.2478782844357004], [-20296.770596257287, 12577.170630568837, 4.864151707567453], [-20568.221055934187, 12378.268888424464, 9.627445344886864], [-20806.286156333445, 12198.921223423496, 16.261559119690446], [-21010.91126003156, 12041.643781362487, 26.29539158447316], [-21181.939441618768, 11909.012979142313, 43.61208546294934], [-21319.05076166094, 11803.666322767416, 81.81476794908922], [-21420.81469800637, 11728.286229333278, 245.49359656489182], [-21486.765413479785, 11685.577137358021, -401.29859425526513], [-21522.88697664401, 11678.546776995176, -124.34857139961225], [-21519.477210375342, 11709.782631335207, -77.26238803584268], [-21478.32522929933, 11782.168407083906, -57.31001252712008], [-21398.06716258982, 11898.495660722285, -45.968247255217406], [-21276.878339236726, 12061.490734018615, -38.427388700868626], [-21112.48398011165, 12273.775700229955, -32.880744873395344], [-20902.083628705783, 12537.820047064755, -28.495799884661842], [-20642.250893707707, 12855.882192783956, -24.834160008093846], [-20328.815271989362, 13229.936319327913, -21.641656946036022], [-19956.728897535475, 13661.576768677523, -18.759536199792453], [-19519.922965507616, 14151.888381572444, -16.0824271339541], [-19011.16295076897, 14701.266882313095, -13.536738870910794], [-18421.918807508388, 15309.169358998353, -11.068881761437359], [-17742.27701528112, 15973.772224549775, -8.638631188140774], [-16960.936633751124, 16691.51482398602, -6.215416486728681], [-16065.351884275498, 17456.51450308631, -3.776433626741073], [-15042.107799081108, 18259.858699535314, -1.3060131318528336], [-13877.637746900915, 19088.818291386026, 1.2040761206442705], [-12559.399656733043, 19926.090486993427, 3.7536236076043905], [-11077.599338668242, 20749.26951229465, 6.332550500800838], [-9427.454254607946, 21530.8435910561, 8.919475329222239], [-7611.803981394004, 22239.082711660332, 11.480883386101283], [-5643.603520926872, 22840.136280403058, 13.971662846077018], [-3547.565744546423, 23301.41952344586, 16.337713951486275], [-1360.1202280263549, 23595.914408700242, 18.520911413028102], [285.6494063871959, 24735.087403088633, -9.510124158523839], [-743.8730217148702, 24829.178152264543, -10.244044218061733], [-1757.775448848554, 24888.267852502708, -10.902228885150691], [-2754.3702187916883, 24914.02143624136, -11.485846599328426], [-3732.186902619108, 24908.155714863966, -11.995873918889966], [-4689.951014727078, 24872.41909835336, -12.433078035642167], [-5626.563544835507, 24808.57548951618, -12.79799263701447], [-6541.081577192969, 24718.39180945241, -13.090886862714644], [-7432.700144351634, 24603.62865171675, -13.31172642137241], [-8300.735371575707, 24466.033615544467, -13.460125219648724], [-9144.608902558268, 24307.33692638219, -13.535285026900205], [-9963.833551769047, 24129.24901007129, -13.53591964911488], [-10758.00009849731, 23933.459742500276, -13.460158677361404], [-11526.765118482035, 23721.63914776135, -13.305423907831843], [-12269.839737758755, 23495.439364040758, -13.068268699284953], [-12986.979187556177, 23256.497737373888, -12.744166364131594], [-13677.973036891148, 23006.440939002634, -12.32722741601246], [-14342.635979567494, 22746.89003246586, -11.80981585340125], [-14980.799053575985, 22479.466441765726, -11.18201949518523], [-15592.30117270941, 22205.798791848618, -10.430904943258527], [-16176.980852034621, 21927.530606834844, -9.539447257603063], [-16734.66801033828, 21646.328859197325, -8.48495525809824], [-17265.175733469307, 21363.893363294916, -7.236691009813533], [-17768.291882299873, 21081.9669977057, -5.752156820674237], [-18243.770427265183, 20802.34672059026, -3.9710889842600987], [-18691.322387045468, 20526.895308300976, -1.8053145943110622], [-19110.606239506684, 20257.5536967856, 0.8792864542539366], [-19501.217652465126, 19996.35373514512, 4.296955806521169], [-19862.67833242448, 19745.431068615464, 8.812165802812556], [-20194.423647920783, 19507.037752936016, 15.09912592058282], [-20495.788164915706, 19283.554062796393, 24.559589054186628], [-20765.985584439837, 19077.498780998485, 40.667396005673496], [-21004.057690756985, 18891.53683585884, 75.0446330293708], [-21208.26295523458, 18728.475438637783, 205.25040548553307], [-21373.225036855736, 18591.153577841673, -542.3907196279348], [-21514.527267933066, 18483.116616285322, -134.37889964692133], [-21612.35090915723, 18407.186329396973, -81.19165079630316], [-21670.668918733267, 18366.856777962967, -59.74491569773529], [-21687.4129722314, 18365.583400086936, -47.82958321145967], [-21660.02065101372, 18406.868820738, -40.01111301944147], [-21585.47344666137, 18494.219060901254, -34.305769709816644], [-21460.22439844592, 18631.086482178453, -29.815142838115523], [-21280.09712153947, 18820.799327613524, -26.071629473397216]];

  ngOnInit(): void {
    combineLatest([
      this.apiService.getStar(this.system_id, this.star_id),
      this.apiService.getAllPlanets(this.system_id, this.star_id),
      this.apiService.getConstant("G"),
      this.apiService.getConstant("Msol"),
      this.apiService.getConstant("Mpln"),
      this.apiService.getConstant("Rpln")])
      .pipe(
        map(([star, planet, G, Msol, Mpln, Rpln]) => {
          planet.starGM = G.value * star.mass * Msol.value;
          planet.GM = G.value * planet.mass * Mpln.value;
          return {planet, Rpln};
        }),
        toArray())
      .subscribe(obj => {
          const origin = obj.find(item => item.planet.name === "1 Omega Hydri 3")?.planet;
          const target = obj.find(item => item.planet.name === "1 Omega Hydri 1")?.planet;

          if (origin !== undefined && target !== undefined) {
            const [r1] = this.orbitDataService.ephemerides(origin, 0);
            const diffs: { tof: number, diff: number }[] = [];
            for (let index = 1; index < 200; index++) {
              const [r2] = this.orbitDataService.ephemerides(target, index * 86400);
              // const [v1, v2] = this.orbitDataService.transfer(r1, r2, index * 86400, origin.starGM);
              const [v1, v2] = this.orbitDataService.transfer_new(r1, r2, index * 86400, origin.starGM);
              const pykep_v1 = new Vector3(this.trans[index - 1][0], this.trans[index - 1][1], this.trans[index - 1][2]);
              diffs.push({"tof": index, "diff": Math.abs(pykep_v1.length() - v1.length())});
            }

            console.log(diffs.length);
            const fdiffs = diffs.filter(obj => !isNaN(obj.diff)).sort((a, b) => b.diff - a.diff);
            const average = fdiffs.map(obj => obj.diff).reduce((a, b) => a + b) / fdiffs.length;

            console.log(fdiffs, average);
          }
        }
      );

    //     filter(obj => obj.planet.name === "1 Omega Hydri 1"))
    //   .subscribe(obj => {
    //     const diffs = Array();
    //     for (let eph = 0; eph < 100; eph++) {
    //       const time = eph * 86400;
    //       const pykep_position: Vector3 = new Vector3(this.results[eph][0][0], this.results[eph][0][1], this.results[eph][0][2]);
    //       const pykep_velocity: Vector3 = new Vector3(this.results[eph][1][0], this.results[eph][1][1], this.results[eph][1][2]);
    //       const [calc_position, calc_velocity] = this.orbitDataService.ephemerides(obj.planet, time);
    //
    //       diffs[eph] = Math.abs(pykep_position.length() - calc_position.length()) + Math.abs(pykep_velocity.length() - calc_velocity.length());
    //     }
    //
    //     const average = diffs.reduce((a, b) => a + b) / diffs.length;
    //     console.log(average);
    //   })



    // this.scene.add(this.orbitsGroup);
    //
    // const canvas = <HTMLCanvasElement>document.getElementById('orbitplot');
    // const renderer = new THREE.WebGLRenderer({canvas})
    //
    // const camera = new THREE.PerspectiveCamera();
    // camera.position.z = 500;
    //
    // const controls = new OrbitControls(camera, renderer.domElement);
    // controls.maxDistance = 500;
    // controls.minDistance = 1;
    // controls.rotateSpeed = 2;
    // controls.minAzimuthAngle = 0;
    // controls.maxAzimuthAngle = 0;
    // controls.minPolarAngle = Math.PI / 2;
    // controls.maxPolarAngle = Math.PI;
    // controls.enablePan = false;
    //
    // {
    //   const light = new THREE.AmbientLight(0xffffff);
    //   this.scene.add(light);
    // }
    //
    // {
    //   const geometry = new THREE.SphereGeometry(1);
    //   const material = new THREE.MeshBasicMaterial({color: 0xFFFFFF})
    //   const sphere = new THREE.Mesh(geometry, material);
    //   sphere.position.set(0, 0, 0);
    //   this.scene.add(sphere);
    //
    //   const light = new THREE.PointLight();
    //   sphere.add(light);
    // }
    //
    // combineLatest([
    //   this.apiService.getStar(this.system_id, this.star_id),
    //   this.apiService.getAllPlanets(this.system_id, this.star_id),
    //   this.apiService.getConstant("G"),
    //   this.apiService.getConstant("Msol"),
    //   this.apiService.getConstant("Mpln"),
    //   this.apiService.getConstant("Rpln")])
    //   .pipe(
    //     map(([star, planet, G, Msol, Mpln, Rpln]) => {
    //       planet.starGM = G.value * star.mass * Msol.value;
    //       planet.GM = G.value * planet.mass * Mpln.value;
    //       return {planet, Rpln};
    //     }))
    //   .subscribe(value => {
    //       const planet = value.planet;
    //       const planet_number = parseInt(planet.name[planet.name.length - 1]) - 1;
    //
    //       {
    //         const planet_radius = planet.radius * value.Rpln.value;
    //
    //         const planet_geometry = new THREE.SphereGeometry(planet_radius / this.solarRadius);
    //         const locator_geometry = new THREE.SphereGeometry(planet_radius / this.solarRadius * this.planetScale);
    //
    //         const planet_material = new THREE.MeshStandardMaterial({color: this.planetColors[planet_number]});
    //         const locator_material = new THREE.MeshStandardMaterial({
    //           color: this.planetColors[planet_number],
    //           transparent: true,
    //           opacity: 0.50
    //         });
    //
    //         const planet_sphere = new THREE.Mesh(planet_geometry, planet_material);
    //         const locator_sphere = new THREE.Mesh(locator_geometry, locator_material);
    //
    //         planet_sphere.name = planet.name;
    //         planet_sphere.userData.planet = planet;
    //         planet_sphere.add(locator_sphere);
    //         this.updatePlanetPosition(planet_sphere, 0);
    //
    //         this.planetLocators.push(locator_sphere);
    //         this.planetsGroup.add(planet_sphere);
    //         this.scene.add(this.planetsGroup);
    //       }
    //
    //       {
    //         // const period: number = this.orbitDataService.orbitalPeriod(planet);
    //         // const times: number[] = Array(this.divisions + 1).fill(0).map((val, index) => index / this.divisions * period);
    //         // const positions = times.map(time => {
    //         //   const [position] = this.orbitDataService.ephemeris(planet, time)
    //         //   return position;
    //         // });
    //         // positions.forEach(position => position.divideScalar(this.solarRadius));
    //         //
    //         // const geometry = new THREE.BufferGeometry().setFromPoints(positions);
    //         // const material = new THREE.LineBasicMaterial({color: this.pathColors[planet_number]});
    //         // const line = new THREE.Line(geometry, material);
    //         // this.orbitsGroup.add(line);
    //       }
    //     },
    //     () => console.log("error"),
    //     () => {
    //       this.working = false;
    //       requestAnimationFrame(render);
    //     });
    //
    // const render: (time: number) => void = (time: number) => {
    //   if (this.lastFrame === undefined) this.lastFrame = time;
    //
    //   if (this.animating) {
    //     const sinceLastFrame = ((time - this.lastFrame) / 1000) * 86400 * this.frameScale;
    //     this.elapsedTime += sinceLastFrame;
    //
    //     this.planetsGroup.children.forEach(obj => this.updatePlanetPosition(obj, this.elapsedTime));
    //   }
    //
    //   this.lastFrame = time;
    //
    //   const pixelRatio = window.devicePixelRatio;
    //   const width = canvas.clientWidth * pixelRatio | 0;
    //   const height = canvas.clientHeight * pixelRatio | 0;
    //
    //   if (canvas.width !== width || canvas.height !== height) {
    //     renderer.setSize(width, height, false);
    //     camera.aspect = canvas.clientWidth / canvas.clientHeight;
    //     camera.updateProjectionMatrix();
    //   }
    //
    //   controls.update();
    //   renderer.render(this.scene, camera);
    //   requestAnimationFrame(render);
    // };
  }

  updatePlanetPosition(object: Object3D, elapsedTime: number) {
    // const planet: Planet = object.userData.planet;
    // const [position] = this.orbitDataService.ephemeris(planet, elapsedTime);
    // position.divideScalar(this.solarRadius);
    // object.position.set(position.x, position.y, position.z);
  }

  drawTransfer(r1: Vector3, v1: Vector3, mu: number, tof: number) {
    // const times: number[] = Array(this.divisions + 1).fill(0).map((val, index) => index / this.divisions * tof);
    // const positions: Vector3[] = times.map(time => {
    //   const [position] = this.orbitDataService.propagate(r1, v1, mu, time);
    //   return position;
    // });
    //
    // positions.forEach(position => {
    //   position.z *= this.zScale;
    //   position.divideScalar(this.solarRadius);
    // });
    //
    // const geometry = new THREE.BufferGeometry().setFromPoints(positions);
    // const material = new THREE.LineBasicMaterial({color: 0x0000FF});
    // const line = new THREE.Line(geometry, material);
    // this.scene.add(line);
  }










  // this.apiService.getPlanets(this.system_id, this.star_id)
    //   .subscribe(planets =>
    //     Promise.all(planets._embedded["trident-api:planet"].map((planet: EmbeddedPlanet) =>
    //       this.orbitDataService.getPath(this.system_id, this.star_id, planet.id)))
    //       .then((paths: Vector3[][]) => {
    //         const colors: number[] = [0xFFB3B3, 0xFFFFB3, 0xB3FFB3];
    //         const orbitsGroup: Group = new THREE.Group();
    //         orbitsGroup.name = this.orbitsGroupName;
    //
    //         paths.forEach((path, index) => {
    //           path.forEach(position => {
    //             position.z *= this.zScale;
    //             position.divideScalar(this.solarRadius);
    //           });
    //
    //           const geometry = new THREE.BufferGeometry().setFromPoints(path);
    //           const material = new THREE.LineBasicMaterial({color: colors[index]});
    //           const line = new THREE.Line(geometry, material);
    //           orbitsGroup.add(line);
    //         });
    //         this.scene.add(orbitsGroup);
    //       })
    //   );

    // Promise.all([
    //   this.orbitDataService.getRpln(),
    //   this.apiService.getPlanet(1621827699, -1826843336, 2035226060),
    //   this.apiService.getPlanet(1621827699, -1826843336, -154475081),
    //   this.apiService.getPlanet(1621827699, -1826843336, 159569841)
    // ])
    //   .then((promises: [Rpln: number, ...rest: Planet[]]) => {
    //     const colors: number[] = [0xFF0000, 0xFFFF00, 0x00FF00];
    //     const [Rpln, ...planets] = promises;
    //
    //     planets.forEach((planet, index) => {
    //       const planet_radius = planet.radius * Rpln;
    //
    //       const planet_geometry = new THREE.SphereGeometry(planet_radius / this.solarRadius, 24, 24);
    //       const locator_geometry = new THREE.SphereGeometry(planet_radius / this.solarRadius * this.planetScale, 24, 24);
    //
    //       const planet_material = new THREE.MeshStandardMaterial({
    //         color: colors[index]
    //       });
    //       const locator_material = new THREE.MeshStandardMaterial({
    //         color: colors[index],
    //         transparent: true,
    //         opacity: 0.50
    //       });
    //
    //       const planet_sphere = new THREE.Mesh(planet_geometry, planet_material);
    //       const locator_sphere = new THREE.Mesh(locator_geometry, locator_material);
    //
    //       planet_sphere.name = planet.name;
    //       planet_sphere.add(locator_sphere);
    //
    //       const [position]: [Vector3, Vector3] = this.orbitDataService.ephemeris(planet, 0);
    //       position.z *= this.zScale;
    //       position.multiplyScalar(this._AU / this.solarRadius);
    //       planet_sphere.position.set(position.x, position.y, position.z);
    //
    //       this.planetLocators.push(locator_sphere);
    //       this.scene.add(planet_sphere);
    //     });
    //
    //     return planets;
    //   })
    //   .then(planets => {
    //     const drawPlanet = (planet: Planet, elapsedTime: number) => {
    //       const [position]: [Vector3, Vector3] = this.orbitDataService.ephemeris(planet, elapsedTime);
    //       position.z *= this.zScale;
    //       position.multiplyScalar(this._AU / this.solarRadius);
    //       this.scene.getObjectByName(planet.name)?.position.set(position.x, position.y, position.z);
    //     }
    //
    //     const drawTransfer = (transfer: Transfer, elapsedTime: number) => {
    //       const transferTime: number = elapsedTime - transfer.startTime;
    //       const [position]: [Vector3, Vector3] = this.orbitDataService.propagate(transfer, transferTime);
    //       position.z *= this.zScale;
    //       position.divideScalar(this.solarRadius);
    //       this.scene.getObjectByName(transfer.name)?.position.set(position.x, position.y, position.z);
    //     }
    //
    //     const render = (time: number) => {
    //       if (lastFrame === undefined) lastFrame = time;
    //
    //       if (this.animating) {
    //         const sinceLastFrame = ((time - lastFrame) / 1000) * 86400 * this.frameScale;
    //         this.elapsedTime += sinceLastFrame;
    //       }
    //       planets.forEach(planet => drawPlanet(planet, this.elapsedTime));
    //       this.transfers.forEach((transfer, index) => {
    //         const transferSphere = this.scene.getObjectByName(transfer.name);
    //         if (transferSphere !== undefined) {
    //           const target = new Vector3(transfer.target.x, transfer.target.y, transfer.target.z);
    //           target.z *= this.zScale;
    //           target.divideScalar(this.solarRadius);
    //           console.log(transferSphere.position.distanceTo(target));
    //           if (transferSphere.position.distanceTo(target) < 0.5) {
    //             this.transfers.splice(index, 1);
    //             const transferPath = this.scene.getObjectByName(this.orbitsGroupName)?.getObjectByName(transfer.name + "-Path");
    //             if (transferPath !== undefined) this.scene.getObjectByName(this.orbitsGroupName)?.remove(transferPath);
    //             this.scene.remove(transferSphere);
    //           } else {
    //             drawTransfer(transfer, this.elapsedTime);
    //           }
    //         }
    //       });
    //
    //       lastFrame = time;
    //
    //       const pixelRatio = window.devicePixelRatio;
    //       const width = canvas.clientWidth * pixelRatio | 0;
    //       const height = canvas.clientHeight * pixelRatio | 0;
    //
    //       if (canvas.width !== width || canvas.height !== height) {
    //         renderer.setSize(width, height, false);
    //         camera.aspect = canvas.clientWidth / canvas.clientHeight;
    //         camera.updateProjectionMatrix();
    //       }
    //
    //       controls.update();
    //       renderer.render(this.scene, camera);
    //       requestAnimationFrame(render);
    //     }
    //     let lastFrame: number;
    //     this.working = false;
    //
    //     requestAnimationFrame(render);
    //   });


  handlePlayEvent(): void {
    this.animating = !this.animating;
  }

  handleSliderChange(event: MatSliderChange) {
    if (event.value != null) this.frameScale = event.value;
  }

  handleSeekEvent(forward: boolean) {
    const currentST = Math.floor(this.elapsedTime / 86400 / 14) + 1;
    if (forward) {
      this.elapsedTime = currentST * 14 * 86400;
    } else {
      const targetET = (currentST - 1) * 14 * 86400;
      if (this.elapsedTime - targetET < 200) {
        this.elapsedTime = (currentST - 2) * 14 * 86400;
      } else {
        this.elapsedTime = (currentST - 1) * 14 * 86400;
      }
      this.elapsedTime = Math.max(0, this.elapsedTime);
    }
    this.planetsGroup.children.forEach(obj => this.updatePlanetPosition(obj, this.elapsedTime));
  }

  handleOrbitsEvent(showOrbits: boolean) {
    this.orbitsGroup.visible = showOrbits;
  }

  handlePlanetLocatorsEvent(showPlanetLocators: boolean) {
    this.planetLocators.forEach(planetLocator => planetLocator.visible = showPlanetLocators);
  }

  getEpochDate(): string {
    // const epochDate = new Date(2000, 0, 1);
    // epochDate.setDate(epochDate.getDate() + Math.floor(this.elapsedTime / 86400));
    //
    // const returnDate = [
    //   epochDate.getFullYear().toString(),
    //   (epochDate.getMonth() + 1).toString().padStart(2, "0"),
    //   epochDate.getDate().toString().padStart(2, "0")
    // ]
    //
    // return returnDate.join("-") + " 00:00:00";

    return "thing"
  }

  handleLambertEvent(min_delta_v: boolean) {
    // const origin: Planet = this.planetsGroup.getObjectByName("1 Omega Hydri 3")?.userData.planet;
    // const target: Planet = this.planetsGroup.getObjectByName("1 Omega Hydri 1")?.userData.planet;
    //
    // const originOrbitRadius = 5954417.346258679;
    // const targetOrbitRadius = 2366596.4289483577;
    //
    // const t1: number = this.elapsedTime;
    //
    // const transfers = range(t1 / 86400, this.maxFT)
    //   .pipe(
    //     map(tof => {
    //       tof *= 86400;
    //       const t2 = t1 + tof;
    //
    //       const [r1, v1] = this.orbitDataService.ephemeris(origin, t1);
    //       const [r2, v2] = this.orbitDataService.ephemeris(target, t2);
    //       const [tv1, tv2] = this.orbitDataService.lambertSolver(r1, r2, tof, origin.starGM);
    //
    //       const dv: number = this.orbitDataService.transferDeltaV(v1, tv1, origin.GM, originOrbitRadius)
    //         + this.orbitDataService.transferDeltaV(v2, tv2, target.GM, targetOrbitRadius);
    //
    //       return {
    //         'flight_time': tof,
    //         'dv': dv,
    //         'r1': r1,
    //         'v1': tv1,
    //         'mu': origin.starGM
    //       };
    //     }),
    //     filter(result => result.dv <= this.maxDV && (result.flight_time / 86400) <= this.maxFT),
    //     toArray()
    //   );
    //
    // transfers.subscribe(transfers => {
    //   if (min_delta_v) {
    //     transfers.sort((e1, e2) => e1.dv - e2.dv);
    //   } else {
    //     transfers.sort((e1, e2) => e1.flight_time - e2.flight_time);
    //   }
    //   const selectedTransfer = transfers[0];
    //
    //   this.orbitDataService.getLambert(min_delta_v, this.getEpochDate(), 1621827699, -1826843336, 159569841, 2035226060)
    //     .then(([path, r1, r2, v1, mu, flight_time, dv]) => {
    //       path.forEach(vector => vector.divideScalar(this.solarRadius));
    //
    //       const geometry = new THREE.BufferGeometry().setFromPoints(path);
    //       const material = new THREE.LineBasicMaterial({color: 0xFF00FF});
    //       const line = new THREE.Line(geometry, material);
    //       this.scene.add(line);
    //     });
    //
    //   console.log(selectedTransfer.r1, selectedTransfer.v1, selectedTransfer.mu);
    //
    //   this.drawTransfer(selectedTransfer.r1, selectedTransfer.v1, selectedTransfer.mu, selectedTransfer.flight_time);
    // });
    //
    //
    //
    //
    // // const tof = 30 * 86400;
    // // const origin = this.planetsGroup.getObjectByName("1 Omega Hydri 3")?.userData.planet;
    // // const target = this.planetsGroup.getObjectByName("1 Omega Hydri 1")?.userData.planet;
    // //
    // // const [r1] = this.orbitDataService.ephemeris(origin, 0);
    // // const [r2] = this.orbitDataService.ephemeris(target, tof);
    // //
    // // const [v1] = this.orbitDataService.lambertSolver(r1, r2, tof, origin.starGM);
    // //
    // // {
    // //   const times: number[] = Array(this.divisions + 1).fill(0).map((val, index) => index / this.divisions * tof);
    // //   const positions: Vector3[] = times.map(time => {
    // //     const [position] = this.orbitDataService.propagate(r1, v1, origin.starGM, time);
    // //     return position;
    // //   });
    // //
    // //   positions.forEach(position => {
    // //     position.divideScalar(this.solarRadius);
    // //     position.z *= this.zScale;
    // //   })
    // //
    // //   const geometry = new THREE.BufferGeometry().setFromPoints(positions);
    // //   const material = new THREE.LineBasicMaterial({color: 0x0000FF});
    // //   const line = new THREE.Line(geometry, material);
    // //   this.scene.add(line);
    // // }
    //
    //
    //
    //
    // // const color = min_delta_v ? 0xFF00FF : 0x00FFFF;
    // // this.working = true;
    // //
    // // this.orbitDataService.getLambert(min_delta_v, this.getEpochDate(), 1621827699, -1826843336, 159569841, 2035226060)
    // //   .then(([path, r1, r2, v1, mu]) => {
    // //
    // //     path.forEach(position => {
    // //       position.z *= this.zScale;
    // //       position.divideScalar(this.solarRadius);
    // //     });
    // //
    // //     const transfer: Transfer = {
    // //       mu: mu,
    // //       name: min_delta_v ? "MinDV" : "MinFT",
    // //       position: r1,
    // //       target: r2,
    // //       velocity: v1,
    // //       startTime: this.elapsedTime
    // //     }
    // //     this.transfers.forEach((item, index) => {
    // //       if (item.name === transfer.name) {
    // //         this.transfers.splice(index, 1);
    // //
    // //         const transferPath = this.orbitsGroup.getObjectByName(transfer.name + "-Path");
    // //         if (transferPath !== undefined) this.orbitsGroup.remove(transferPath);
    // //
    // //         const transferSphere = this.scene.getObjectByName(transfer.name);
    // //         if (transferSphere !== undefined) this.scene.remove(transferSphere);
    // //       }
    // //     });
    // //
    // //     this.transfers.push(transfer);
    // //     {
    // //       const geometry = new THREE.BufferGeometry().setFromPoints(path);
    // //       const material = new THREE.LineBasicMaterial({color: color});
    // //       const line = new THREE.Line(geometry, material);
    // //       line.name = transfer.name + "-Path";
    // //       this.orbitsGroup.add(line);
    // //     }
    // //
    // //     {
    // //       const geometry = new THREE.SphereGeometry(2, 24, 24);
    // //       const material = new THREE.MeshBasicMaterial({color: color});
    // //       const mesh = new THREE.Mesh(geometry, material);
    // //       const position = new Vector3(transfer.position.x, transfer.position.y, transfer.position.z);
    // //       position.z *= this.zScale;
    // //       position.divideScalar(this.solarRadius);
    // //       mesh.position.set(position.x, position.y, position.z);
    // //       mesh.name = transfer.name;
    // //       this.scene.add(mesh);
    // //     }
    // //   })
    // //   .finally(() => this.working = false);
  }
}
